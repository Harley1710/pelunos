import streamlit as st
from openai import OpenAI 
from paginas.funcoes import (
    obter_perfil_usuario, 
    registrar_acao_usuario, 
    registrar_atividade_academica,
    salvar_chat, 
    obter_chats, 
    obter_chat, 
    excluir_chat,
    atualizar_chat,
    login_usuario,
    obter_pets,
    obter_info_exames
)
from paginas.llms import gerar_titulo_chat
from datetime import datetime

# Verifica se o usu√°rio est√° logado
if not hasattr(st.user, 'is_logged_in') or not st.user.is_logged_in:
    st.warning("Voc√™ precisa fazer login para conversar com Dr. Peluno.")
    st.stop()

# Realiza o login do usu√°rio (atualiza √∫ltimo acesso)
login_usuario() 

# Registra a a√ß√£o de login apenas na primeira vez que a p√°gina √© carregada na sess√£o
if 'login_registrado' not in st.session_state:
    registrar_acao_usuario("Login", "Chat Dr. Peluno")
    st.session_state['login_registrado'] = True

# Obt√©m o perfil e define o nome do usu√°rio ANTES de usar no popover
perfil = obter_perfil_usuario()
# Usa o primeiro nome para a sauda√ß√£o, com fallback para o given_name do login ou 'Querida(o)'
if perfil:
    nome_usuario = perfil.get("nome_completo", getattr(st.user, 'given_name', 'Querida(o)'))
else:
    nome_usuario = getattr(st.user, 'given_name', 'Querida(o)')
    
# Pega s√≥ o primeiro nome se for nome completo
if nome_usuario and ' ' in nome_usuario:
    nome_usuario = nome_usuario.split(' ')[0]

# Verifica e exibe a mensagem de boas-vindas no primeiro login
if st.session_state.get('show_welcome_message', False):
    with st.popover("Bem-vindo! üêæ", use_container_width=True):
        st.markdown(f"Ol√°, **{nome_usuario}**! Sou o Dr. Peluno, seu especialista veterin√°rio virtual!")
        st.markdown("Como conhe√ßo todos os detalhes dos seus pets, posso te dar conselhos personalizados e precisos sobre comportamento, sa√∫de e cuidados! üêæ")
        st.button("Vamos conversar!", use_container_width=True, key="welcome_close")
    # Remove o flag para n√£o mostrar novamente
    del st.session_state['show_welcome_message']

# Configura√ß√µes iniciais
openai_api_key = st.secrets["OPENAI_API_KEY"]
client = OpenAI(api_key=openai_api_key)

# Fun√ß√£o para obter avatar do usu√°rio
def obter_avatar_usuario():
    """Define o avatar do usu√°rio baseado na foto do perfil"""
    user_picture = getattr(st.user, 'picture', None)
    if user_picture and isinstance(user_picture, str) and user_picture.startswith(('http://', 'https://')):
        return user_picture
    else:
        return 'arquivos/avatar_usuario.jpg'

# Mensagem inicial personalizada do Dr. Peluno
def obter_mensagem_inicial():
    """Gera mensagem inicial personalizada com base no perfil do usu√°rio"""
    mensagens_iniciais = [
        f"Oi {nome_usuario}! üêæ Sou o Dr. Peluno, seu especialista veterin√°rio. Como est√£o seus pets hoje?",
        f"Ol√° {nome_usuario}! ‚ú® Que bom te ver aqui! Como especialista dos seus pets, em que posso ajudar?",
        f"Oi {nome_usuario}! üêï Dr. Peluno na √°rea! Me conta sobre seus bichinhos!",
        f"Ol√° {nome_usuario}! üê± Dr. Peluno aqui! Quer conversar sobre comportamento, sa√∫de ou cuidados com seus pets?"
    ]
    import random
    return random.choice(mensagens_iniciais)

# Define os avatars
avatar_user = obter_avatar_usuario()
avatar_assistant = 'arquivos/peluno.png'

MENSAGEM_INICIAL = obter_mensagem_inicial()

# Gera o resumo de informa√ß√µes de exames de cada pet
pets = obter_pets()
contexto_exames = obter_info_exames(pets)

def obter_system_prompt(perfil):
    """Gera o system prompt personalizado para Dr. Peluno"""
    return f"""

**PERSONA:** Voc√™ √© o Dr. Peluno, um especialista veterin√°rio virtual caloroso, experiente e dedicado. Profissional competente, bem-humorado e acolhedor. Fala em portugu√™s-BR, frases curtas, **negrito** para destaques e m√°x. *dois emojis* por mensagem.

INFORMA√á√ïES DO USU√ÅRIO:
- Nome: {perfil.get('nome_completo', 'N√£o informado')}
- Idade: {perfil.get('idade', 'N√£o informada')}
- Experi√™ncia com Pets: {perfil.get('experiencia_pets', 'N√£o informada')}
- Tipos de Pets: {perfil.get('tipos_pets', 'N√£o informado')}
- Situa√ß√£o Atual: {perfil.get('situacao_atual', 'N√£o informada')}

INFORMA√á√ïES DOS PETS:
{perfil['resumos_pet']}

INFORMA√á√ïES DOS EXAMES DE CADA PET:
{contexto_exames}

## 2. Miss√£o

Durante uma conversa **natural e acolhedora**, ajude o usu√°rio com quest√µes sobre pets, descobrindo discretamente informa√ß√µes importantes para dar o melhor conselho. Seja o Dr. Peluno, um especialista veterin√°rio dedicado e emp√°tico.

### Cinco √°reas principais de atua√ß√£o

1. **Sa√∫de b√°sica** ‚Äî Sintomas, preven√ß√£o, cuidados di√°rios.
2. **Comportamento** ‚Äî Problemas comportamentais e treinamento.
3. **Alimenta√ß√£o** ‚Äî Dieta adequada, quantidade, hor√°rios.
4. **Cuidados gerais** ‚Äî Higiene, exerc√≠cios, ambiente.
5. **Primeiros socorros** ‚Äî Orienta√ß√µes para emerg√™ncias b√°sicas.

*Exemplos de abordagens (usar conforme a situa√ß√£o):*

* "Como tem sido a rotina do seu pet ultimamente?"
* "Voc√™ notou alguma mudan√ßa no comportamento ou apetite?"
* "Que tipo de alimenta√ß√£o voc√™ tem oferecido?"
* "Como est√° o ambiente onde ele fica?"
* "J√° teve alguma experi√™ncia com emerg√™ncias veterin√°rias?"

---

## 3. Estrat√©gia de Atendimento

1. **Engaje** com interesse genu√≠no sobre os pets do usu√°rio.
2. **Colete informa√ß√µes** relevantes de forma natural para dar conselhos precisos.
3. **IMPORTANTE**: Para emerg√™ncias ou sintomas graves, **sempre** oriente a buscar um veterin√°rio presencial imediatamente.
4. Seja sempre **pr√°tico e claro** nas orienta√ß√µes, mas sem esquecer o carinho.

---

## 4. Regras "Nunca Fazer"

* Nunca diagnosticar doen√ßas ou prescrever medicamentos espec√≠ficos.
* **SEMPRE** orientar a buscar veterin√°rio presencial para emerg√™ncias.
* Evitar dar conselhos que possam colocar o animal em risco.
* N√£o alegar ser um veterin√°rio real; deixar claro que √© o Dr. Peluno, um especialista IA.
* Respeitar imediatamente se o usu√°rio disser **parar**.

---

### üêæ Resumo Operacional

Seja o Dr. Peluno, um especialista veterin√°rio virtual dedicado e emp√°tico. Ajude com **orienta√ß√µes gerais, comportamento, cuidados b√°sicos e preven√ß√£o**. Sempre priorize o bem-estar animal e oriente para cuidados profissionais quando necess√°rio. 
"""

# Inicializa√ß√£o do hist√≥rico de mensagens e chat ativo
if 'mensagens' not in st.session_state:
    st.session_state.mensagens = [
        {
            "role": "assistant",
            "content": MENSAGEM_INICIAL
        }
    ]

if 'chat_ativo_id' not in st.session_state:
    st.session_state.chat_ativo_id = None

if 'chat_ativo_nome' not in st.session_state:
    st.session_state.chat_ativo_nome = "Nova Conversa"

# Cabe√ßalho com apresenta√ß√£o do Dr. Peluno
st.markdown("""
<style>
.dr-peluno-header {
    padding: 20px 0;
    margin-bottom: 30px;
}

.dr-peluno-title {
    font-size: 28px;
    font-weight: bold;
    margin-bottom: 15px;
    color: #004aad;
}

.dr-peluno-subtitle {
    font-size: 16px;
    color: #333;
    line-height: 1.6;
}
</style>
""", unsafe_allow_html=True)

# Cabe√ßalho principal
col_foto, col_info = st.columns([1, 3])

with col_foto:
    st.image('arquivos/peluno.png', width=80, use_container_width=True)

with col_info: 
    st.markdown('<div class="dr-peluno-title">ü©∫ Dr. Peluno</div>', unsafe_allow_html=True)
    st.markdown('<div class="dr-peluno-subtitle">', unsafe_allow_html=True)
    st.markdown("### **Seu Especialista Veterin√°rio Virtual Personalizado** üêæ")
    st.markdown("")
    st.markdown("Como conhe√ßo **todos os detalhes** dos seus pets - desde hist√≥rico m√©dico at√© prefer√™ncias alimentares - posso te dar conselhos **precisos e personalizados** que nenhum outro assistente poderia oferecer!")
    st.markdown("</div>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

# Sidebar com hist√≥rico de chats
with st.sidebar: 
    
    # Bot√£o de novo chat
    if st.button("‚ú® Nova Conversa", key="novo_chat", use_container_width=True, type="primary"):
        nova_mensagem_inicial = obter_mensagem_inicial()  # Gera nova mensagem
        st.session_state.mensagens = [
            {
                "role": "assistant",
                "content": nova_mensagem_inicial
            }
        ]
        st.session_state.chat_ativo_id = None
        st.session_state.chat_ativo_nome = "Nova Conversa"
        registrar_acao_usuario("Nova Conversa", "Usu√°rio iniciou nova conversa com Dr. Peluno")
        st.rerun()
    
    # Exibir chats existentes
    chats = obter_chats() 
    
    if len(chats) == 0:
        st.info("Voc√™ ainda n√£o tem conversas salvas! üêæ")
    
    for chat in chats:
        col1, col2 = st.columns([7, 1])
        with col1:
            if st.button(f"{chat['nome']}", key=f"chat_{chat['id']}", use_container_width=True):
                chat_data = obter_chat(chat['id'])
                if chat_data and 'mensagens' in chat_data:
                    st.session_state.mensagens = chat_data['mensagens']
                    st.session_state.chat_ativo_id = chat['id']
                    st.session_state.chat_ativo_nome = chat['nome']
                    registrar_acao_usuario("Abrir Conversa", f"Usu√°rio abriu a conversa {chat['nome']}")
                    st.rerun()
        with col2:
            if st.button("üóëÔ∏è", key=f"excluir_{chat['id']}"):
                excluir_chat(chat['id'])
                registrar_acao_usuario("Excluir Conversa", f"Usu√°rio excluiu a conversa {chat['nome']}")
                # Se o chat exclu√≠do for o ativo, iniciar um novo chat
                if st.session_state.chat_ativo_id == chat['id']:
                    nova_mensagem_inicial = obter_mensagem_inicial()
                    st.session_state.mensagens = [
                        {
                            "role": "assistant",
                            "content": nova_mensagem_inicial
                        }
                    ]
                    st.session_state.chat_ativo_id = None
                    st.session_state.chat_ativo_nome = "Nova Conversa"
                st.rerun()

# Exibi√ß√£o do hist√≥rico de mensagens
for mensagem in st.session_state.mensagens:
    role = mensagem["role"]
    # Define o avatar a ser exibido baseado no role
    if role == "user":
        display_avatar = avatar_user
    elif role == "assistant":
        display_avatar = avatar_assistant
    else:
        display_avatar = None
        
    with st.chat_message(role, avatar=display_avatar):
        # Aplica as substitui√ß√µes para formato de matem√°tica do Streamlit apenas nas mensagens do Dr. Peluno
        if role == "assistant":
            display_content = mensagem["content"].replace('\\[', '$$').replace('\\]', '$$')\
                                               .replace('\\(', '$').replace('\\)', '$')
            st.markdown(display_content)
        else:
            st.write(mensagem["content"])

# Input e processamento de mensagens
prompt = st.chat_input(placeholder="Me conta sobre seus pets... üêæ")

if prompt:
    # Registra a pergunta do usu√°rio
    registrar_atividade_academica(
        tipo="chatbot_dr_peluno",
        modulo="Dr. Peluno - Especialista Veterin√°rio",
        detalhes={
            "acao": "pergunta",
            "tamanho_pergunta": len(prompt),
            "chat_id": st.session_state.chat_ativo_id,
            "chat_nome": st.session_state.chat_ativo_nome
        }
    )
    
    # Adiciona mensagem do usu√°rio
    st.session_state.mensagens.append({
        "role": "user",
        "content": prompt
    })
    
    # Mostra mensagem do usu√°rio
    with st.chat_message("user", avatar=avatar_user):
        st.write(prompt)

    # Processa resposta do Dr. Peluno
    with st.chat_message("assistant", avatar=avatar_assistant):
        try:
            # Prepara o sistema prompt personalizado para Dr. Peluno
            system_prompt = obter_system_prompt(perfil)

            # Prepara mensagens para a API
            messages = [{"role": "system", "content": system_prompt}]
            
            # Adiciona apenas as √∫ltimas 10 mensagens para manter contexto sem ultrapassar limites
            recent_messages = st.session_state.mensagens[-10:]
            for msg in recent_messages:
                if msg["role"] != "system":
                    messages.append({
                        "role": msg["role"], 
                        "content": msg["content"]
                    })
            
            # Chama a API da OpenAI
            resposta_stream = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                temperature=0.8,  # Um pouco mais criativa para conselhos amorosos
                max_tokens=1000,
                stream=True
            )
            
            # Exibe resposta em tempo real
            resposta_completa = ""
            container = st.empty()
            
            for chunk in resposta_stream:
                if chunk.choices[0].delta.content is not None:
                    resposta_completa += chunk.choices[0].delta.content
                    container.markdown(resposta_completa + "‚ñå")
            
            # Remove o cursor e mostra resposta final
            container.markdown(resposta_completa)
            
            # Adiciona resposta ao hist√≥rico
            st.session_state.mensagens.append({
                "role": "assistant",
                "content": resposta_completa
            })
            
            # SALVAMENTO AUTOM√ÅTICO AP√ìS CADA RESPOSTA
            # Se n√£o h√° chat ativo, cria um novo
            if st.session_state.chat_ativo_id is None:
                # Gera t√≠tulo da conversa baseado no conte√∫do
                try:
                    titulo = gerar_titulo_chat(st.session_state.mensagens)
                    if not titulo:
                        titulo = f"Conversa de {datetime.now().strftime('%d/%m/%Y %H:%M')}"
                except:
                    titulo = f"Conversa de {datetime.now().strftime('%d/%m/%Y %H:%M')}"
                
                # Salva a nova conversa
                chat_id = salvar_chat(titulo, st.session_state.mensagens)
                if chat_id:
                    st.session_state.chat_ativo_id = chat_id
                    st.session_state.chat_ativo_nome = titulo
                    registrar_acao_usuario("Nova Conversa Salva", f"Conversa salva automaticamente: {titulo}")
            else:
                # Atualiza conversa existente
                atualizar_chat(st.session_state.chat_ativo_id, st.session_state.mensagens)
                registrar_acao_usuario("Conversa Atualizada", f"Conversa {st.session_state.chat_ativo_nome} atualizada")
            
            # Registra a resposta
            registrar_atividade_academica(
                        tipo="chatbot_dr_peluno",
        modulo="Dr. Peluno - Especialista Veterin√°rio",
                detalhes={
                    "acao": "resposta",
                    "tamanho_resposta": len(resposta_completa),
                    "chat_id": st.session_state.chat_ativo_id,
                    "chat_nome": st.session_state.chat_ativo_nome
                }
            )
            
        except Exception as e:
            st.error(f"Ops! Tive um probleminha t√©cnico: {str(e)}")
            st.error("Tenta novamente, por favor! üêæ")


